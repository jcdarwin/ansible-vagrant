---
# file roles/common/tasks/main.yml

- name: Create {{ group }} group
  group: name={{ group }} state=present

- action: shell whoami
  register: whoami

- name: update apt cache
  apt: update_cache=yes cache_valid_time=3600
  sudo: yes

- name: upgrade the distro
  apt: upgrade=yes
  sudo: yes

- name: install packages
  apt: pkg={{ item }} state=latest
  sudo: yes
  with_items:
    - build-essential
    - git
    - tree
    - vim
    - psmisc
    - chkrootkit
    - ufw
    - nginx
    - curl
    - gnupg
    - zip
    - rsync
    - wget
    - unattended-upgrades

- name: forbid SSH root login
  sudo: yes
  lineinfile: destfile=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
  notify:
    - restart ssh

- name: reset firewall
  sudo: yes
  action: shell ufw --force reset

- name: allow firewall authorized ports
  sudo: yes
  action: shell ufw allow {{ item }} 
  with_items:
    - 22
    - 80

- name: enable firewall
  sudo: yes
  action: shell ufw --force enable

# ===============================================================
# Access, security and permissions
# ===============================================================
- name: Users | Write the sudoers file
  action: template src=templates/sudoers.j2 dest=/etc/sudoers.d/custom
      owner=root group=root mode=0400

# Users are locked if they do not have a password. This generates a random password for a user so SSH public key logins work.
- name: Users | Generate password
  shell: password="{{ lookup('password', '/tmp/' + item + '_README.txt length=12') }}"
  with_items: users

- name: Users | Create user(s)
  user: name={{ item }} shell=/bin/bash group={{ group }} password="{{ lookup('file', '/tmp/' + item + '_README.txt') }}"
  sudo: yes
  with_items: users

- name: Users | Copy password to README.txt in users home directory
  copy: src=/tmp/{{ item }}_README.txt dest=/home/{{ item }}/README.txt owner={{ item }} group={{ group }} mode=0600
  with_items: users

#- name: debugging
#  debug: msg="PASSWORD is {{ lookup('file', '/tmp/' + item + '/README.txt') }}"
#  with_items: users

- name: Users | Delete tmp files
  sudo: no
  local_action: shell rm /tmp/*_README.txt

# Presumes we've already created the keys locally in {{ key_files }} by running ./localhost.sh
- name: Users | Pushing authorized key(s) to remote server(s)
  action: authorized_key user={{ item }} key="$FILE({{ key_files }}/{{ item }}.pub)"
  sudo: yes
  with_items: users
